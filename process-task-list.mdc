---
description: 
globs: 
alwaysApply: false
---
# Task List Management

Guidelines for managing task lists in markdown files to track progress on completing a PRD

## Task Implementation
- **One sub-task at a time:** Do **NOT** start the next sub-task until you ask the user for permission and they say “yes” or "y"
- **Testing (TDD) Protocol:**
  - **Before any implementation code**, create and show failing tests (unit and/or E2E) for this sub-task.
  - Only once the tests exist should you write the *minimal* code needed to make those tests pass.
  - Mark tests as passing (`[x]`) before marking implementation code subtasks as completed.
- **Completion protocol:**
  1. When you finish a **sub-task** (tests + code), immediately mark it as completed by changing `[ ]` to `[x]`.
  2. If **all** subtasks underneath a parent task are now `[x]`, also mark the **parent task** as completed.
- Stop after each sub-task and wait for the user’s go-ahead.

## Task List Maintenance

1. **Update the task list as you work:**
   - Mark tasks and subtasks as completed (`[x]`) per the protocol above.
   - Add new tasks as they emerge.

2. **Maintain the “Relevant Files” section:**
   - List every file created or modified.
   - Give each file a one-line description of its purpose.

## AI Instructions

When working with task lists, the AI must:

1. Regularly update the task list file after finishing any significant work.
2. Follow the completion protocol:
   - Mark each finished **sub-task** `[x]`.
   - Mark the **parent task** `[x]` once **all** its subtasks are `[x]`.
3. Add newly discovered tasks.
4. Keep “Relevant Files” accurate and up to date.
5. Before starting work, check which sub-task is next.
6. After implementing a sub-task, update the file and then pause for user approval.

## Error & Stall Handling

1. **If the AI encounters an internal error or stalls while thinking through a sub-task:**
   1. Break the current sub-task into exactly **4 micro-steps**, each as small and focused as possible.
   2. Present those four micro-steps as a bulleted list, then ask the user:  
      “I’ve broken this sub-task into 4 smaller steps to avoid stalls. Shall we continue with step 1?”
   3. Only after the user responds “Go” (or “Yes”) should you proceed with executing any of those micro-steps.
   4. After each micro-step, repeat the protocol: write failing tests first, implement minimal code, mark as complete, then pause for user approval. 
